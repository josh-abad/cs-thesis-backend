{"version":3,"sources":["webpack:///./src/components/BasePanel.vue","webpack:///./src/components/BasePanel.vue?9657","webpack:///./src/views/SettingsPage.vue","webpack:///./src/components/ToggleButton.vue","webpack:///./src/components/ToggleButton.vue?9944","webpack:///./src/components/ToggleButton.vue?ad61","webpack:///./src/views/SettingsPage.vue?fdd6","webpack:///./src/views/SettingsPage.vue?fff4"],"names":["class","script","render","xmlns","viewBox","fill","fill-rule","d","clip-rule","automatic","label","darkMode","disabled","for","modelValue","value","$emit","$event","target","checked","id","type","name","props","Boolean","required","default","String","emits","components","ToggleButton","BasePanel","data","mounted","this","theme","watch","enabled","handleChangeTheme","methods","$store","commit","computed","state"],"mappings":"qIACOA,MAAM,sD,wCAAX,eAEM,MAFN,EAEM,CADJ,eAAa,sBCDjB,MAAMC,EAAS,GACfA,EAAOC,OAASA,EAED,U,6DCDT,eAcM,OAdDF,MAAM,qBAAmB,CAC5B,eAWM,OAVJA,MAAM,uBACNG,MAAM,6BACNC,QAAQ,YACRC,KAAK,gB,CAEL,eAIE,QAHAC,YAAU,UACVC,EAAE,+fACFC,YAAU,cAGd,eAAmD,OAA9CR,MAAM,2BAA0B,c,MAElCA,MAAM,Q,EACT,eAIK,MAHHA,MAAM,oEACP,gBAED,G,mHAtBN,eAsCM,YArCJ,eAoCY,Q,wBAnCV,iBAcM,CAdN,EAeA,eAmBM,MAnBN,EAmBM,CAlBJ,EAKA,eAKM,YAJJ,eAGE,G,WAFS,EAAAS,U,qDAAA,EAAAA,UAAS,IAClBC,MAAM,uC,yBAGV,eAMM,YALJ,eAIE,G,WAHS,EAAAC,S,qDAAA,EAAAA,SAAQ,IACjBD,MAAM,YACLE,SAAU,EAAAH,W,qEC1BbT,MAAM,Y,GAmBNA,MAAM,gB,gDA1Bd,eA2BQ,SA1BLa,IAAK,EAAAH,MACNV,MAAK,CAAC,gCACS,WAAQ,2D,CAIvB,eAkBO,OAlBP,EAkBO,CAjBL,eAGQ,QAFNA,MAAK,CAAC,2CACE,EAAAc,WAAU,gD,QAEpB,eAYO,QAXLd,MAAK,CAAC,8JACE,EAAAc,WAAU,kC,CAElB,eAOE,SANCC,MAAO,EAAAD,WACP,SAAM,+BAAE,EAAAE,MAAK,oBAAsBC,EAAOC,OAAOC,WACjDC,GAAI,EAAAV,MACJE,SAAU,EAAAA,SACXS,KAAK,WACLrB,MAAM,8B,yCAIZ,eAA6C,OAA7C,EAA6C,eAAf,EAAAU,OAAK,I,YCxBxB,qBAAgB,CAC7BY,KAAM,eACNC,MAAO,CACLT,WAAY,CACVO,KAAMG,QACNC,UAAU,EACVC,SAAS,GAEXhB,MAAO,CACLW,KAAMM,OACNF,UAAU,EACVC,QAAS,IAEXd,SAAU,CACRS,KAAMG,QACNC,UAAU,EACVC,SAAS,IAGbE,MAAO,CAAC,uBCnBV,EAAO1B,OAAS,EAED,Q,YCEA,iBAAgB,CAC7B2B,WAAY,CAAEC,eAAcC,YAAA,MAC5BT,KAAM,eACNU,KAH6B,WAI3B,MAAO,CACLvB,WAAW,EACXE,UAAU,IAGdsB,QAT6B,WAUvBC,KAAKC,MACPD,KAAKvB,SAA0B,SAAfuB,KAAKC,MAErBD,KAAKzB,WAAY,GAGrB2B,MAAO,CACL3B,UADK,SACM4B,GACLA,EACFH,KAAKI,kBAAkB,MAEvBJ,KAAKI,kBAAkBJ,KAAKvB,SAAW,OAAS,UAGpDA,SARK,SAQK0B,GACRH,KAAKI,kBAAkBD,EAAU,OAAS,WAG9CE,QAAS,CACPD,kBADO,SACYH,GACjBD,KAAKM,OAAOC,OAAO,OAAWN,KAGlCO,SAAU,CACRP,MADQ,WAEN,OAAOD,KAAKM,OAAOG,MAAMR,UCvC/B,EAAOjC,OAASA,EAED","file":"js/chunk-13da0e6f.f8a3bf72.js","sourcesContent":["<template>\n  <div class=\"bg-gray-100 dark:bg-gray-800 shadow p-6 rounded-lg\">\n    <slot></slot>\n  </div>\n</template>\n","import { render } from \"./BasePanel.vue?vue&type=template&id=61b34d76\"\nconst script = {}\nscript.render = render\n\nexport default script","<template>\n  <div>\n    <BasePanel>\n      <div class=\"flex items-center\">\n        <svg\n          class=\"fill-current w-8 h-8\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox=\"0 0 20 20\"\n          fill=\"currentColor\"\n        >\n          <path\n            fill-rule=\"evenodd\"\n            d=\"M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z\"\n            clip-rule=\"evenodd\"\n          />\n        </svg>\n        <div class=\"ml-2 font-bold text-3xl\">Settings</div>\n      </div>\n      <div class=\"mt-8\">\n        <h1\n          class=\"uppercase font-semibold tracking-wide text-xs dark:text-gray-400\"\n        >\n          Appearance\n        </h1>\n        <div>\n          <ToggleButton\n            v-model=\"automatic\"\n            label=\"Automatic (follows system settings)\"\n          />\n        </div>\n        <div>\n          <ToggleButton\n            v-model=\"darkMode\"\n            label=\"Dark Mode\"\n            :disabled=\"automatic\"\n          />\n        </div>\n      </div>\n    </BasePanel>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport BasePanel from '@/components/BasePanel.vue'\nimport ToggleButton from '@/components/ToggleButton.vue'\nimport { SET_THEME } from '@/store/mutation-types'\nimport { Theme } from '@/types'\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  components: { ToggleButton, BasePanel },\n  name: 'SettingsPage',\n  data () {\n    return {\n      automatic: false,\n      darkMode: false\n    }\n  },\n  mounted () {\n    if (this.theme) {\n      this.darkMode = this.theme === 'dark'\n    } else {\n      this.automatic = true\n    }\n  },\n  watch: {\n    automatic (enabled: boolean) {\n      if (enabled) {\n        this.handleChangeTheme(null)\n      } else {\n        this.handleChangeTheme(this.darkMode ? 'dark' : 'light')\n      }\n    },\n    darkMode (enabled: boolean) {\n      this.handleChangeTheme(enabled ? 'dark' : 'light')\n    }\n  },\n  methods: {\n    handleChangeTheme (theme: Theme) {\n      this.$store.commit(SET_THEME, theme)\n    }\n  },\n  computed: {\n    theme (): Theme {\n      return this.$store.state.theme\n    }\n  }\n})\n</script>\n","<template>\n  <label\n    :for=\"label\"\n    class=\"mt-3 inline-flex items-center\"\n    :class=\"\n      disabled ? 'opacity-50 cursor-default' : 'opacity-100 cursor-pointer'\n    \"\n  >\n    <span class=\"relative\">\n      <span\n        class=\"block w-10 h-6 rounded-full shadow-inner\"\n        :class=\"modelValue ? 'bg-green-500' : 'bg-gray-400 dark:bg-gray-600'\"\n      ></span>\n      <span\n        class=\"absolute block w-4 h-4 mt-1 ml-1 bg-white rounded-full shadow-lg inset-y-0 left-0 focus-within:shadow-outline transition-transform duration-300 ease-in-out\"\n        :class=\"modelValue ? 'transform translate-x-full' : ''\"\n      >\n        <input\n          :value=\"modelValue\"\n          @change=\"$emit('update:modelValue', $event.target.checked)\"\n          :id=\"label\"\n          :disabled=\"disabled\"\n          type=\"checkbox\"\n          class=\"absolute opacity-0 w-0 h-0\"\n        />\n      </span>\n    </span>\n    <span class=\"ml-3 text-sm\">{{ label }}</span>\n  </label>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  name: 'ToggleButton',\n  props: {\n    modelValue: {\n      type: Boolean,\n      required: false,\n      default: false\n    },\n    label: {\n      type: String,\n      required: false,\n      default: ''\n    },\n    disabled: {\n      type: Boolean,\n      required: false,\n      default: false\n    }\n  },\n  emits: ['update:modelValue']\n})\n</script>\n","\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  name: 'ToggleButton',\n  props: {\n    modelValue: {\n      type: Boolean,\n      required: false,\n      default: false\n    },\n    label: {\n      type: String,\n      required: false,\n      default: ''\n    },\n    disabled: {\n      type: Boolean,\n      required: false,\n      default: false\n    }\n  },\n  emits: ['update:modelValue']\n})\n","import { render } from \"./ToggleButton.vue?vue&type=template&id=0628dc31\"\nimport script from \"./ToggleButton.vue?vue&type=script&lang=ts\"\nexport * from \"./ToggleButton.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","\nimport BasePanel from '@/components/BasePanel.vue'\nimport ToggleButton from '@/components/ToggleButton.vue'\nimport { SET_THEME } from '@/store/mutation-types'\nimport { Theme } from '@/types'\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  components: { ToggleButton, BasePanel },\n  name: 'SettingsPage',\n  data () {\n    return {\n      automatic: false,\n      darkMode: false\n    }\n  },\n  mounted () {\n    if (this.theme) {\n      this.darkMode = this.theme === 'dark'\n    } else {\n      this.automatic = true\n    }\n  },\n  watch: {\n    automatic (enabled: boolean) {\n      if (enabled) {\n        this.handleChangeTheme(null)\n      } else {\n        this.handleChangeTheme(this.darkMode ? 'dark' : 'light')\n      }\n    },\n    darkMode (enabled: boolean) {\n      this.handleChangeTheme(enabled ? 'dark' : 'light')\n    }\n  },\n  methods: {\n    handleChangeTheme (theme: Theme) {\n      this.$store.commit(SET_THEME, theme)\n    }\n  },\n  computed: {\n    theme (): Theme {\n      return this.$store.state.theme\n    }\n  }\n})\n","import { render } from \"./SettingsPage.vue?vue&type=template&id=42d1fec2\"\nimport script from \"./SettingsPage.vue?vue&type=script&lang=ts\"\nexport * from \"./SettingsPage.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script"],"sourceRoot":""}